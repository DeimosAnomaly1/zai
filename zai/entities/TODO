## Features
 - Pathfinding with a Sparse Voxel Octree
 - Velocity based Actor movement
 - Smooth Actor rotation
 ## Scheduling:
    - Build schuedules based on string buffers
    Ex:
    ```cs
        schedMan.createScheduleFromString
		(
			"guard_fire",               // add this schedule with THIS name, and push it to the array

			"	Tasks"
			"		TASK_STOP_MOVING				0"
			"		TASK_FACE_ENEMY                 8"
			"		GUARD_FIRE                      3"
			"	"
			"	Interrupts"
			"		FAIL_NO_TARGET"
			"	FallBack"               // find a schedule with this name in the `schedules` array
			"		guard_reload",
			1
		);
    ```

## implment these tasks:
    ```cs
        // Set the implied goal for TASK_GET_PATH_TO_GOAL
        TASK_SET_GOAL,

        // Get the path to the goal specified by TASK_SET_GOAL
        TASK_GET_PATH_TO_GOAL,

        // Path to the enemy's location. Even if the enemy is unseen!
        TASK_GET_PATH_TO_ENEMY,
        
        // Path to the last place this character saw the enemy
        TASK_GET_PATH_TO_ENEMY_LKP,

        // Path to the enemy's location or path to a LOS with the enemy's last known position, depending on range
        TASK_GET_CHASE_PATH_TO_ENEMY,

        // Path to a LOS with the enemy's last known position
        TASK_GET_PATH_TO_ENEMY_LKP_LOS,

        // Path to the dead enemy's carcass.
        TASK_GET_PATH_TO_ENEMY_CORPSE,

        // Path to the player's origin
        TASK_GET_PATH_TO_PLAYER,

        // Path to node with line of sight to enemy
        TASK_GET_PATH_TO_ENEMY_LOS,

        // Path to node with line of sight to enemy, at least flTaskData units away from m_vSavePosition
        TASK_GET_FLANK_RADIUS_PATH_TO_ENEMY_LOS,

        // Path to node with line of sight to enemy, at least flTaskData degrees away from m_vSavePosition from the enemy's POV
        TASK_GET_FLANK_ARC_PATH_TO_ENEMY_LOS,

        // Path to the within shot range of last place this character saw the enemy
        TASK_GET_PATH_TO_RANGE_ENEMY_LKP_LOS,

        // Build a path to m_hTargetEnt
        TASK_GET_PATH_TO_TARGET,

        // Allow a little slop, and allow for some Z offset (like the target is a gun on a table).
        TASK_GET_PATH_TO_TARGET_WEAPON,

        TASK_CREATE_PENDING_WEAPON,

        // Path to nodes[ m_pHintNode ]
        TASK_GET_PATH_TO_HINTNODE,

        // Move to the goal specified by the player in command mode.
        TASK_GET_PATH_TO_COMMAND_GOAL,

        TASK_MARK_COMMAND_GOAL_POS,

        TASK_CLEAR_COMMAND_GOAL,

        // Run the current path
        TASK_RUN_PATH,	

        // Walk the current path
        TASK_WALK_PATH,	

        // Walk the current path for a specified number of seconds
        TASK_WALK_PATH_TIMED,

        // Walk the current path until you are x units from the goal.
        TASK_WALK_PATH_WITHIN_DIST,

        // Walk the current path until for x units
        TASK_WALK_PATH_FOR_UNITS,

        // Rung the current path until you are x units from the goal.
        TASK_RUN_PATH_FLEE,

        // Run the current path for a specified number of seconds
        TASK_RUN_PATH_TIMED,

        // Run the current path until for x units
        TASK_RUN_PATH_FOR_UNITS,

        // Run the current path until you are x units from the goal.
        TASK_RUN_PATH_WITHIN_DIST,

        // Walk the current path sideways (must be supported by animation)
        TASK_STRAFE_PATH,

        // Turn to face nodes[ m_pHintNode ]
        TASK_FACE_HINTNODE,
    ```